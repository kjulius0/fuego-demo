/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 *  This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.  Below is a Fuego Cheatsheet to help you get started. Don\'t hesitate to check the [Fuego documentation](https://go-fuego.dev) for more details.  Happy coding! ðŸ”¥  ## Usage  ### Route registration  ```go func main() {  // Create a new server  s := fuego.NewServer()   // Register some routes  fuego.Post(s, \"/hello\", myController)  fuego.Get(s, \"/myPath\", otherController)  fuego.Put(s, \"/hello\", thirdController)   adminRoutes := fuego.Group(s, \"/admin\")  fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/_*,   fuego.Get(adminRoutes, \"/hello\", groupController) // This route will be available at /admin/hello   // Start the server  s.Start() } ```  ### Basic controller  ```go type MyBody struct {  Name string `json:\"name\" validate:\"required,max=30\"` }  type MyResponse struct {  Answer string `json:\"answer\"` }  func hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {  body, err := ctx.Body()  if err != nil {   return nil, err  }   return &MyResponse{Answer: \"Hello \" + body.Name}, nil } ```  ### Add openAPI information to the route  ```go import (  \"github.com/go-fuego/fuego\"  \"github.com/go-fuego/fuego/option\"  \"github.com/go-fuego/fuego/param\" )  func main() {  s := fuego.NewServer()   // Custom OpenAPI options  fuego.Post(s, \"/\", myController   option.Description(\"This route does something...\"),   option.Summary(\"This is my summary\"),   option.Tags(\"MyTag\"), // A tag is set by default according to the return type (can be deactivated)   option.Deprecated(), // Marks the route as deprecated in the OpenAPI spec    option.Query(\"name\", \"Declares a query parameter with default value\", param.Default(\"Carmack\")),   option.Header(\"Authorization\", \"Bearer token\", param.Required()),   optionPagination,   optionCustomBehavior,  )   s.Run() }  var optionPagination = option.Group(  option.QueryInt(\"page\", \"Page number\", param.Default(1), param.Example(\"1st page\", 1), param.Example(\"42nd page\", 42)),  option.QueryInt(\"perPage\", \"Number of items per page\"), )  var optionCustomBehavior = func(r *fuego.BaseRoute) {  r.XXX = \"YYY\" } ```  Then, in the controller  ```go type MyResponse struct {  Answer string `json:\"answer\"` }  func getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {  name := ctx.QueryParam(\"name\")  perPage, _ := ctx.QueryParamIntErr(\"per_page\")   return &MyResponse{Answer: \"Hello \" + name}, nil } ``` 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * AnimalRequest schema
 * @export
 * @interface AnimalRequest
 */
export interface AnimalRequest {
    /**
     * Secret number to access animals
     * @type {number}
     * @memberof AnimalRequest
     */
    'secret': number;
}
/**
 * AnimalResponse schema
 * @export
 * @interface AnimalResponse
 */
export interface AnimalResponse {
    /**
     * Animal habitat
     * @type {string}
     * @memberof AnimalResponse
     */
    'habitat'?: string;
    /**
     * Random animal ID
     * @type {number}
     * @memberof AnimalResponse
     */
    'id'?: number;
    /**
     * Animal name
     * @type {string}
     * @memberof AnimalResponse
     */
    'name'?: string;
    /**
     * Whether secret was correct
     * @type {boolean}
     * @memberof AnimalResponse
     */
    'secret'?: boolean;
    /**
     * Animal type
     * @type {string}
     * @memberof AnimalResponse
     */
    'type'?: string;
}
/**
 * GreetingInput schema
 * @export
 * @interface GreetingInput
 */
export interface GreetingInput {
    /**
     * Name to greet
     * @type {string}
     * @memberof GreetingInput
     */
    'name': string;
}
/**
 * GreetingResponse schema
 * @export
 * @interface GreetingResponse
 */
export interface GreetingResponse {
    /**
     * Greeting message
     * @type {string}
     * @memberof GreetingResponse
     */
    'message'?: string;
    /**
     * When the greeting was generated
     * @type {string}
     * @memberof GreetingResponse
     */
    'timestamp'?: string;
}
/**
 * HTTPError schema
 * @export
 * @interface HTTPError
 */
export interface HTTPError {
    /**
     * Human readable error message
     * @type {string}
     * @memberof HTTPError
     */
    'detail'?: string;
    /**
     * 
     * @type {Array<HTTPErrorErrorsInner>}
     * @memberof HTTPError
     */
    'errors'?: Array<HTTPErrorErrorsInner>;
    /**
     * 
     * @type {string}
     * @memberof HTTPError
     */
    'instance'?: string;
    /**
     * HTTP status code
     * @type {number}
     * @memberof HTTPError
     */
    'status'?: number;
    /**
     * Short title of the error
     * @type {string}
     * @memberof HTTPError
     */
    'title'?: string;
    /**
     * URL of the error type. Can be used to lookup the error in a documentation
     * @type {string}
     * @memberof HTTPError
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface HTTPErrorErrorsInner
 */
export interface HTTPErrorErrorsInner {
    /**
     * Additional information about the error
     * @type {{ [key: string]: any; }}
     * @memberof HTTPErrorErrorsInner
     */
    'more'?: { [key: string]: any; };
    /**
     * For example, name of the parameter that caused the error
     * @type {string}
     * @memberof HTTPErrorErrorsInner
     */
    'name'?: string;
    /**
     * Human readable error message
     * @type {string}
     * @memberof HTTPErrorErrorsInner
     */
    'reason'?: string;
}
/**
 * HealthResponse schema
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * Health status
     * @type {string}
     * @memberof HealthResponse
     */
    'status': string;
    /**
     * Current server time
     * @type {string}
     * @memberof HealthResponse
     */
    'time': string;
}
/**
 * UserResponse schema
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * User email
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * User ID
     * @type {number}
     * @memberof UserResponse
     */
    'id'?: number;
    /**
     * When the user joined
     * @type {string}
     * @memberof UserResponse
     */
    'join_date'?: string;
    /**
     * User name
     * @type {string}
     * @memberof UserResponse
     */
    'name'?: string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * #### Controller:   `main.userHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Retrieve user information by user ID
         * @summary Get user information
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gETApiUserId: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gETApiUserId', 'id', id)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * #### Controller:   `main.animalHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Returns a random animal if the correct secret number (22) is provided
         * @summary Get random animal
         * @param {AnimalRequest} animalRequest Request body for main.AnimalRequest
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOSTApiAnimal: async (animalRequest: AnimalRequest, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'animalRequest' is not null or undefined
            assertParamExists('pOSTApiAnimal', 'animalRequest', animalRequest)
            const localVarPath = `/api/animal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(animalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * #### Controller:   `main.greetingHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Takes a name and returns a personalized greeting message
         * @summary Generate a greeting
         * @param {GreetingInput} greetingInput Request body for main.GreetingInput
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOSTApiGreeting: async (greetingInput: GreetingInput, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'greetingInput' is not null or undefined
            assertParamExists('pOSTApiGreeting', 'greetingInput', greetingInput)
            const localVarPath = `/api/greeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(greetingInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * #### Controller:   `main.userHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Retrieve user information by user ID
         * @summary Get user information
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gETApiUserId(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gETApiUserId(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.gETApiUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * #### Controller:   `main.animalHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Returns a random animal if the correct secret number (22) is provided
         * @summary Get random animal
         * @param {AnimalRequest} animalRequest Request body for main.AnimalRequest
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOSTApiAnimal(animalRequest: AnimalRequest, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOSTApiAnimal(animalRequest, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.pOSTApiAnimal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * #### Controller:   `main.greetingHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Takes a name and returns a personalized greeting message
         * @summary Generate a greeting
         * @param {GreetingInput} greetingInput Request body for main.GreetingInput
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOSTApiGreeting(greetingInput: GreetingInput, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GreetingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOSTApiGreeting(greetingInput, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.pOSTApiGreeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * #### Controller:   `main.userHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Retrieve user information by user ID
         * @summary Get user information
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gETApiUserId(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.gETApiUserId(id, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * #### Controller:   `main.animalHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Returns a random animal if the correct secret number (22) is provided
         * @summary Get random animal
         * @param {AnimalRequest} animalRequest Request body for main.AnimalRequest
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOSTApiAnimal(animalRequest: AnimalRequest, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<AnimalResponse> {
            return localVarFp.pOSTApiAnimal(animalRequest, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * #### Controller:   `main.greetingHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Takes a name and returns a personalized greeting message
         * @summary Generate a greeting
         * @param {GreetingInput} greetingInput Request body for main.GreetingInput
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOSTApiGreeting(greetingInput: GreetingInput, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<GreetingResponse> {
            return localVarFp.pOSTApiGreeting(greetingInput, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * #### Controller:   `main.userHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Retrieve user information by user ID
     * @summary Get user information
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public gETApiUserId(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).gETApiUserId(id, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * #### Controller:   `main.animalHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Returns a random animal if the correct secret number (22) is provided
     * @summary Get random animal
     * @param {AnimalRequest} animalRequest Request body for main.AnimalRequest
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public pOSTApiAnimal(animalRequest: AnimalRequest, accept?: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).pOSTApiAnimal(animalRequest, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * #### Controller:   `main.greetingHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware` - `main.authMiddleware`  ---  Takes a name and returns a personalized greeting message
     * @summary Generate a greeting
     * @param {GreetingInput} greetingInput Request body for main.GreetingInput
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public pOSTApiGreeting(greetingInput: GreetingInput, accept?: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).pOSTApiGreeting(greetingInput, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * #### Controller:   `main.healthHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware`  ---  Returns the health status of the API server
         * @summary Health check endpoint
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gETHealth: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * #### Controller:   `main.healthHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware`  ---  Returns the health status of the API server
         * @summary Health check endpoint
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gETHealth(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gETHealth(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.gETHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * #### Controller:   `main.healthHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware`  ---  Returns the health status of the API server
         * @summary Health check endpoint
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gETHealth(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse> {
            return localVarFp.gETHealth(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * #### Controller:   `main.healthHandler`  #### Middlewares:  - `github.com/go-fuego/fuego.defaultLogger.middleware`  ---  Returns the health status of the API server
     * @summary Health check endpoint
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gETHealth(accept?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).gETHealth(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



