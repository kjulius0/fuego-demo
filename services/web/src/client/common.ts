/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 *  This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.  Below is a Fuego Cheatsheet to help you get started. Don\'t hesitate to check the [Fuego documentation](https://go-fuego.dev) for more details.  Happy coding! ðŸ”¥  ## Usage  ### Route registration  ```go func main() {  // Create a new server  s := fuego.NewServer()   // Register some routes  fuego.Post(s, \"/hello\", myController)  fuego.Get(s, \"/myPath\", otherController)  fuego.Put(s, \"/hello\", thirdController)   adminRoutes := fuego.Group(s, \"/admin\")  fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/_*,   fuego.Get(adminRoutes, \"/hello\", groupController) // This route will be available at /admin/hello   // Start the server  s.Start() } ```  ### Basic controller  ```go type MyBody struct {  Name string `json:\"name\" validate:\"required,max=30\"` }  type MyResponse struct {  Answer string `json:\"answer\"` }  func hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {  body, err := ctx.Body()  if err != nil {   return nil, err  }   return &MyResponse{Answer: \"Hello \" + body.Name}, nil } ```  ### Add openAPI information to the route  ```go import (  \"github.com/go-fuego/fuego\"  \"github.com/go-fuego/fuego/option\"  \"github.com/go-fuego/fuego/param\" )  func main() {  s := fuego.NewServer()   // Custom OpenAPI options  fuego.Post(s, \"/\", myController   option.Description(\"This route does something...\"),   option.Summary(\"This is my summary\"),   option.Tags(\"MyTag\"), // A tag is set by default according to the return type (can be deactivated)   option.Deprecated(), // Marks the route as deprecated in the OpenAPI spec    option.Query(\"name\", \"Declares a query parameter with default value\", param.Default(\"Carmack\")),   option.Header(\"Authorization\", \"Bearer token\", param.Required()),   optionPagination,   optionCustomBehavior,  )   s.Run() }  var optionPagination = option.Group(  option.QueryInt(\"page\", \"Page number\", param.Default(1), param.Example(\"1st page\", 1), param.Example(\"42nd page\", 42)),  option.QueryInt(\"perPage\", \"Number of items per page\"), )  var optionCustomBehavior = func(r *fuego.BaseRoute) {  r.XXX = \"YYY\" } ```  Then, in the controller  ```go type MyResponse struct {  Answer string `json:\"answer\"` }  func getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {  name := ctx.QueryParam(\"name\")  perPage, _ := ctx.QueryParamIntErr(\"per_page\")   return &MyResponse{Answer: \"Hello \" + name}, nil } ``` 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        }
        else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)
            );
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}
